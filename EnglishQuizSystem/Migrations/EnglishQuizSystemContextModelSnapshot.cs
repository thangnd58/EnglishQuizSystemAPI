// <auto-generated />
using System;
using EnglishQuizSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnglishQuizSystem.Migrations
{
    [DbContext(typeof(EnglishQuizSystemContext))]
    partial class EnglishQuizSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EnglishQuizSystem.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("is_correct");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<string>("Text")
                        .HasColumnType("ntext")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("answer", (string)null);
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<int?>("Difficulty")
                        .HasColumnType("int")
                        .HasColumnName("difficulty");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.Property<string>("Text")
                        .HasColumnType("ntext")
                        .HasColumnName("text");

                    b.Property<bool?>("Type")
                        .HasColumnType("bit")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("question", (string)null);
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("CodeActive")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("code_active");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("quiz", (string)null);
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "UserName" }, "UQ__user__7C9273C40FA9F6A6")
                        .IsUnique()
                        .HasFilter("[user_name] IS NOT NULL");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.UserAnswer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<int>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("answer_id");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.HasKey("UserId", "QuestionId", "AnswerId", "QuizId")
                        .HasName("user_answer_pk");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("user_answer", (string)null);
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.UserQuiz", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.Property<double?>("Score")
                        .HasColumnType("float")
                        .HasColumnName("score");

                    b.HasKey("UserId", "QuizId")
                        .HasName("user_topic_pk");

                    b.HasIndex("QuizId");

                    b.ToTable("user_quiz", (string)null);
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.Answer", b =>
                {
                    b.HasOne("EnglishQuizSystem.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK__answer__question__534D60F1");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.Question", b =>
                {
                    b.HasOne("EnglishQuizSystem.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .HasConstraintName("FK__question__quiz_i__5070F446");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.User", b =>
                {
                    b.HasOne("EnglishQuizSystem.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__user__role_id__4BAC3F29");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.UserAnswer", b =>
                {
                    b.HasOne("EnglishQuizSystem.Models.Answer", "Answer")
                        .WithMany("UserAnswers")
                        .HasForeignKey("AnswerId")
                        .IsRequired()
                        .HasConstraintName("FK__user_answ__answe__5812160E");

                    b.HasOne("EnglishQuizSystem.Models.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK__user_answ__quest__571DF1D5");

                    b.HasOne("EnglishQuizSystem.Models.Quiz", "Quiz")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnglishQuizSystem.Models.User", "User")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__user_answ__user___5629CD9C");

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.UserQuiz", b =>
                {
                    b.HasOne("EnglishQuizSystem.Models.Quiz", "Quiz")
                        .WithMany("UserQuizzes")
                        .HasForeignKey("QuizId")
                        .IsRequired()
                        .HasConstraintName("FK__user_quiz__quiz___5BE2A6F2");

                    b.HasOne("EnglishQuizSystem.Models.User", "User")
                        .WithMany("UserQuizzes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__user_quiz__user___5AEE82B9");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.Answer", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserAnswers");

                    b.Navigation("UserQuizzes");
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EnglishQuizSystem.Models.User", b =>
                {
                    b.Navigation("UserAnswers");

                    b.Navigation("UserQuizzes");
                });
#pragma warning restore 612, 618
        }
    }
}
