@using Newtonsoft.Json;
@{
	string token = Context.Session.GetString("token");
}
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>@ViewData["Title"] - EnglishQuizSystemClient</title>
	<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
	<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
	<link rel="stylesheet" href="~/EnglishQuizSystemClient.styles.css" asp-append-version="true" />
</head>
<body>
	<header>
		<nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
			<div class="container-fluid">
				<a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">EnglishQuizSystemClient</a>
				<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
						aria-expanded="false" aria-label="Toggle navigation">
					<span class="navbar-toggler-icon"></span>
				</button>
				<div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
					<ul class="navbar-nav flex-grow-1">
						<li class="nav-item">
							<a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
						</li>
						@if (token == "" || token == null)
						{
							<li class="nav-item">
								<a class="nav-link text-dark" asp-area="" asp-controller="Auth" asp-action="Login">Login</a>
							</li>
						} else
						{
							<li class="nav-item">
								<a class="nav-link text-dark" asp-area="" asp-controller="Auth" asp-action="Logout">Logout</a>
							</li>
						}
					</ul>
				</div>
			</div>
		</nav>
	</header>
	<div class="container">
		<input type="hidden" value="@token" id="token" />
		<main role="main" class="pb-3">
			@RenderBody()
		</main>
	</div>

	<footer class="border-top footer text-muted">
		<div class="container">
			&copy; 2023 - EnglishQuizSystemClient
		</div>
	</footer>
	<script src="~/lib/jquery/dist/jquery.min.js"></script>
	<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
	<script src="~/js/site.js" asp-append-version="true"></script>
	<script type="text/javascript">
		var token = $('#token').val();
		window.localStorage.setItem("token", token);
	</script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.0/jquery.min.js" integrity="sha512-3gJwYpMe3QewGELv8k/BX9vcqhryRdzRMxVfq6ngyWXwo03GFEzjsUm8Q7RZcHPHksttq7/GFoxjCVUjkjvPdw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
	<script>
		var bearer = 'Bearer ' + localStorage.getItem("token");
		const publisherList = $("#quiz-list");
		$.ajax({
			url: `https://localhost:7280/api/Quiz`,
			type: "GET",
			headers: { Authorization: bearer },
			dataType: "json",
			success: function (data) {
				// Clear the previous results
				publisherList.empty();

				// Iterate over the data and create a new row for each publisher
				$.each(data, function (index, quiz) {
					const row = $("<tr/>");
					row.append($("<td/>").text(quiz.id));
					row.append($("<td/>").append($("<a/>").attr("href", `/Quiz?id=${quiz.id}`).text(quiz.name)));
					publisherList.append(row);
				});
			},
			error: function (jqXHR, textStatus, errorThrown) {
				console.log("Error while fetching publishers:", textStatus, errorThrown);
			}
		});


		function search(txt, type) {
			const publisherList = $("#quiz-list");
			var datalink = `contains(tolower(${type}), tolower('${txt}'))`;
			$.ajax({
				url: `https://localhost:7280/api/Quiz`,
				type: "GET",
				headers: { Authorization: bearer },
				dataType: "json",
				data: { $filter: datalink },
				success: function (data) {
					// Clear the previous results
					publisherList.empty();

					// Iterate over the data and create a new row for each publisher
					$.each(data, function (index, quiz) {
						const row = $("<tr/>");
						row.append($("<td/>").text(quiz.id));
						row.append($("<td/>").append($("<a/>").attr("href", `/Quiz?id=${quiz.id}`).text(quiz.name)));
						publisherList.append(row);
					});
				},
				error: function (jqXHR, textStatus, errorThrown) {
					console.log("Error while fetching publishers:", textStatus, errorThrown);
				}
			});
		}
	</script>
	@await RenderSectionAsync("Scripts", required: false)
</body>
</html>
